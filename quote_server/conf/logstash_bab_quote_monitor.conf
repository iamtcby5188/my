input {
  stdin{}
  file{
	path => "/opt/sumscope/component/babquote_1.1/logs/*.log"
	start_position => "end"
  }
}
filter{	
   grok {
	match => {
		"message" => ".*\[AppMonitor:facadePerformance\].*\[methodName:(?<methodName>.*)\]\[usedTime:(?<responseTime>[1-9][0-9]*)\]"
	}
   }
   
   grok {
	match => {
		"message" => ".*\[AppMonitor:timerOnlineNum\]\[onlinePeopleCount:(?<onLineCount>[0-9]*)\]"
	}
   }
   
   grok {
	match => {
		"message" => "\[LEVEL: (?<level>[A-Z]{4,5})\s+\].*\[\w+:(?<className>[\.a-zA-Z_0-9]+)\](?<msg>[^\[].*)"
	}
   }
}


output{
	if([responseTime] =~ "[0-9]+"){
		stdout{codec=>rubydebug}
		influxdb{
			db => "BAB.Quote"
			host => "172.16.18.88"
			port => 8086
			user => "quote"
			password => "123456"
			measurement => "bab_responsetime"
			allow_time_override => true
			retention_policy => "autogen"
			coerce_values => {
				"methodName" => "string"
				"responseTime" => "integer"
			}
			send_as_tags => ["methodName","hostName"]
			data_points => {
				"methodName" => "%{methodName}"
				"responseTime" => "%{responseTime}"
			}
		}
	}else if([onLineCount] =~ "[0-9]+"){
		stdout{codec=>rubydebug}
		influxdb{
			db => "BAB.Quote"
			host => "172.16.18.88"
			port => 8086
			user => "quote"
			password => "123456"
			measurement => "bab_online"
			allow_time_override => true
			retention_policy => "autogen"
			coerce_values => {
				"onLineCount" => "integer"
			}
			send_as_tags => ["AppMonitor","hostName"]
			data_points => {
				"onLineCount" => "%{onLineCount}"
			}
		}	
	}else{
		if([msg] =~ ".+"){
			stdout{codec=>rubydebug}
			influxdb{
				db => "BAB.Quote"
				host => "172.16.18.88"
				port => 8086
				user => "quote"
				password => "123456"
				measurement => "bab_iwe"
				allow_time_override => true
				retention_policy => "autogen"
				coerce_values => {
					"level" => "string"
					"msg" => "string"
				}
				send_as_tags => ["className"]
				data_points => {
					"level" => "%{level}"
					"msg" => "%{msg}"
				}
			}
		}
	}

}
